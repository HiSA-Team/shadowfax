# The goal of this Dockerfile is to create a consistent build environment.
# The base image is debian:12.
# Project dependencies are:
# - rust toolchain (with riscv64gc and riscv64imac target)
# - gcc riscv toolchain
# - shell utils to build Linux kernel
# - qemu
# - opensbi development files
#
# Usage: run this image in a container mounting the project directory as a bind
# volume. Opensbi is installed in /shadowfax directory
#
#   docker build -t shadowfax-build \
#     --build-arg USER_ID=$(id -u) \
#     --build-arg PLATFORM=generic \
#     --build-arg OPENSBI=1.6 \
#     --file scripts/Dockerfile.setup .
#
# Default starts a shell environment:
#   docker run -v $(pwd):/shadowfax -it shadowfax-build
#
# Execute an example with:
#   docker run --rm -v $(pwd):/shadowfax -it shadowfax-build make -C examples/helloworld-c run
# Author: Giuseppe Capsso <capassog97@gmail.com>

FROM debian:12

# Build argument for user ID
ARG USER_ID=1000
ARG PLATFORM=generic
ARG OPENSBI_VERSION=1.6

# Install dependencies
RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get -y install make qemu-system \
  gcc-riscv64-linux-gnu build-essential libncurses-dev bison flex libssl-dev \
  libelf-dev dwarves curl git file cpio sudo bc clang libclang-dev

# Create a user with the specified or default UID and add him to the sudo group
# and allow for passwordless sudo
RUN useradd -m -u $USER_ID -s /bin/bash user
RUN usermod -aG sudo user
RUN echo '%sudo ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers

COPY ./scripts/environment.sh /environment.sh

# Switch to 'user' for the rest of the of setup
USER user

WORKDIR /shadowfax

# Create a user with the specified or default UID and add him to the sudo group
# and allow for passwordless sudo
RUN useradd -m -u $USER_ID -s /bin/bash user
RUN usermod -aG sudo user
RUN echo '%sudo ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers

COPY ./scripts/environment.sh /environment.sh

# Switch to 'user' for the rest of the of setup
USER user

WORKDIR /shadowfax

# Install and setup rust
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y

RUN echo 'source $HOME/.cargo/env' >> /home/user/.bashrc
ENV PATH="/home/user/.cargo/bin:${PATH}"

RUN rustup target add riscv64gc-unknown-none-elf
RUN rustup target add riscv64imac-unknown-none-elf
RUN rustup component add rust-analyzer

# Install opensbi

RUN curl -fsSL https://github.com/riscv-software-src/opensbi/archive/refs/tags/v$OPENSBI_VERSION.tar.gz -o /tmp/opensbi-$OPENSBI_VERSION.tar.gz

RUN tar xvf /tmp/opensbi-$OPENSBI_VERSION.tar.gz -C /tmp
RUN . /environment.sh && make -C /tmp/opensbi-$OPENSBI_VERSION PLATFORM=$PLATFORM
RUN make -C /tmp/opensbi-$OPENSBI_VERSION I=/shadowfax PLATFORM=$PLATFORM install

# Setup entrypoint. This file sets up the shell environment  when the container is created.
# This is useful for single command run like:
#
#   docker run -it --rm -v $(pwd):/shadowfax make -C examples/helloworld-c
# or
#   docker run --rm -v $(pwd):/shadowfax cargo build
#
# entrypoint.sh
# #!/bin/sh
# . /environment.sh
# exec "$@"
RUN echo '#!/bin/sh' | sudo tee /entrypoint.sh
RUN echo '. /environment.sh' | sudo tee -a /entrypoint.sh
RUN echo 'exec "$@"' | sudo tee -a /entrypoint.sh

RUN sudo chmod +x /entrypoint.sh
ENTRYPOINT ["/entrypoint.sh"]
CMD ["bash"]
